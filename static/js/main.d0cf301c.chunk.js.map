{"version":3,"sources":["reducers/mapReducer.js","components/home/Home.jsx","constants/colors.js","components/maps/State/State.js","actions/mapActions.js","constants/action-types.js","components/maps/Map/Map.js","components/maps/DataTable/DataTable.js","components/maps/MapDescription/MapDescription.js","components/navigation/Chevron/Chevron.jsx","components/graphs/Line/Line.js","components/graphs/LineDescription/LineDescription.js","App.js","constants/chevron-paths.js","sagas/mapSagas.js","config.js","sagas/routerSagas.js","sagas/rootSaga.js","constants/descriptions.js","index.js"],"names":["initialState","fetchingData","geoData","shootingsData","censusData","activeState","stateName","shootings","shootingsPerMillion","temporalFilter","shootingsByDate","Home","props","calculateStats","bind","createTitles","maps","this","total","length","numDays","differenceInDays","Date","average","toFixed","className","style","fontFamily","marginTop","fontWeight","flexDirection","component","map","title","i","key","appear","classNames","timeout","React","Component","connect","state","mapReducer","colors","State","onInteractionHandler","numShootings","population","dispatch","type","getHoveredStateData","mapType","feature","path","radius","fill","d","stroke","strokeWidth","onMouseEnter","onClick","onTouchStart","centroid","geoPath","translate","r","transform","opacity","properties","stateAbbreviation","Map","generatePath","generateCircle","generateChoroplethLegend","generateProportionalSymbolLegend","data","shootingsPerCapita","breaks","getChoroplethBreaks","sortedIndex","shootingsArray","sortBy","objects","states","geometries","legendValues","uniq","tick","round","d3","concat","statesByShootings","orderBy","maxState","domain","range","legendRects","legendTexts","forEach","value","rect","x","y","width","height","text","fontSize","push","every","legendComponents","cy","dy","textAnchor","topojson","features","legend","xmlns","viewBox","ownProps","DataTable","activeTab","isHoverOnHighest","isHoverOnLowest","onMouseEnterHandler","onMouseLeaveHandler","onClickHandler","getTableNodes","styles","choropleth","columnHeader","active","background","color","border","inactive","proportional","event","target","id","setState","ascDesc","slice","stateNames","stateStats","highest","lowest","onMouseLeave","MapDescription","router","stat","result","descTitle","descSubtitle","jsx","Chevron","visible","direction","data-direction","visibility","aria-hidden","Line","LabelPositionMap","2015","2016","DelayMap","stats2015","stats2016","labelPosition","route","delay","padding","top","bottom","left","right","domainPadding","scale","tickValues","tickFormat","t","format","label","axisLabel","tickLabels","dependentAxis","parseInt","animate","onEnter","duration","subtitle","description","App","goToNext","goToPrevious","getChevronVisibility","goToNextChild","goToPreviousChild","nextRoute","findKey","routes","index","prevRoute","currentRoute","hasChildren","childIndex","parent","position","isLastRoute","hasNextSibling","forRoute","watchAPICall","callAPI","takeLatest","CENSUS_CATEGORY_BY_RACE","black","hispanic","asian","nativeAmerican","white","axiosCallAPI","axios","all","get","process","Object","values","join","call","put","dataByState","groupBy","populationStats","drop","populationBlack","populationHispanic","populationAsian","populationAIAN","populationWhite","populationTotal","matchState","matchShootings","code","matchPopulation","find","name","select","initializeCurrentLocation","console","log","watchLocationChanged","handleLocationChanged","shootingsFilters","filterKey","filterValue","populationValue","filterShootingsData","clone","filter","entry","handleMapRoutes","populationFilter","matchId","joinShootingsDataToGeoData","handleDateRoutes","shooting","month","year","partition","parse","valueOf","keys","emptyMonths","date","data2015","data2016","unionBy","action","payload","rootSaga","isLastChildRoute","routerForBrowser","basename","reducer","middleware","enhancer","sagaMiddleware","createSagaMiddleware","store","createStore","combineReducers","window","__REDUX_DEVTOOLS_EXTENSION__","compose","applyMiddleware","run","ReactDOM","render","document","getElementById","createElement"],"mappings":"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","file":"static/js/main.d0cf301c.chunk.js","sourcesContent":["// import necessary modules\nimport * as actionTypes from '../constants/action-types';\n\n// define our initial reducer state\nexport const initialState = {\n  fetchingData: true,\n  geoData: [],\n  shootingsData: [],\n  censusData: [],\n  activeState: {\n    stateName: 'New Mexico',\n    shootings: 43,\n    shootingsPerMillion: 20.66,\n  },\n  temporalFilter: '100',\n  shootingsByDate: [],\n};\n\nexport const mapReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.CALL_API:\n      return {\n        ...state,\n        fetchingData: true,\n      };\n    case actionTypes.SEND_API_DATA_TO_REDUCER:\n      return {\n        ...state,\n        geoData: action.data,\n        fetchingData: false,\n      };\n    case actionTypes.SEND_SHOOTINGS_DATA_TO_REDUCER:\n      return {\n        ...state,\n        shootingsData: action.data,\n      };\n    case actionTypes.SEND_CENSUS_DATA_TO_REDUCER:\n      return {\n        ...state,\n        censusData: action.censusData,\n      };\n    case actionTypes.GET_HOVERED_STATE_DATA:\n      return {\n        ...state,\n        activeState: action.state,\n      };\n    case actionTypes.SEND_SHOOTINGS_BY_DATE_TO_REDUCER:\n      return {\n        ...state,\n        shootingsByDate: action.shootingsByDate,\n      };\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport differenceInDays from 'date-fns/differenceInDays';\n\nimport '../../stylesheets/Home.scss';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.calculateStats = this.calculateStats.bind(this);\n    this.createTitles = this.createTitles.bind(this);\n  }\n\n  calculateStats() {\n    const { maps } = this.props;\n    // get the total and average number of shootings per day\n    const total = `${maps.shootingsData.length}`;\n    const numDays = differenceInDays(\n      new Date(2016, 11, 31),\n      new Date(2015, 0, 1)\n    );\n    const average = (maps.shootingsData.length / numDays).toFixed(1);\n    return {\n      total,\n      average,\n    };\n  }\n\n  createTitles() {\n    const { total, average } = this.calculateStats();\n    return [\n      <div className=\"home-text\">\n        Between January 1, 2015 and December 31, 2016\n      </div>,\n      <div className=\"home-text home-text--large\">\n        <b>{total}</b> people\n      </div>,\n      <div className=\"home-text\">\n        were killed by police in the United States.\n      </div>,\n      <div className=\"home-text\">\n        That amounts to roughly <b className=\"home-text-large\">{average}</b>{' '}\n        people per day.\n      </div>,\n      <div className=\"home-text\">Here's what we know.</div>,\n      <div\n        className=\"home-text\"\n        style={{\n          fontFamily: 'HelveticaNeue, Helvetica, sans-serif',\n          marginTop: '5%',\n          fontWeight: 900,\n        }}\n      >\n        An Investigation | By Parker Ziegler\n      </div>,\n    ];\n  }\n\n  render() {\n    return (\n      <div className=\"page-content\" style={{ flexDirection: 'column' }}>\n        <TransitionGroup component={null}>\n          {this.createTitles().map((title, i) => {\n            return (\n              <CSSTransition\n                key={i}\n                appear\n                classNames={`home-transition-${i}`}\n                timeout={15000}\n              >\n                {title}\n              </CSSTransition>\n            );\n          })}\n        </TransitionGroup>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  maps: state.mapReducer,\n});\n\nexport default connect(mapStateToProps)(Home);\n","export const colors = [\n  'rgb(247,251,255)',\n  'rgb(222,235,247)',\n  'rgb(198,219,239)',\n  'rgb(158,202,225)',\n  'rgb(107,174,214)',\n  'rgb(66,146,198)',\n  'rgb(33,113,181)',\n  'rgb(8,81,156)',\n];\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { geoPath } from 'd3';\nimport PropTypes from 'prop-types';\n\nimport { getHoveredStateData } from '../../../actions/mapActions';\n\nclass State extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onInteractionHandler = this.onInteractionHandler.bind(this);\n  }\n\n  onInteractionHandler() {\n    const { stateName, numShootings, population, dispatch } = this.props;\n    // when a user hovers or clicks on a state, dispatch an action to set this state\n    // as the activeState in the mapsReducer\n    const state = {\n      stateName,\n      shootings: numShootings,\n      shootingsPerMillion: (numShootings / population) * 1000000,\n    };\n    dispatch(getHoveredStateData(state));\n  }\n\n  render() {\n    const { mapType, feature, path, radius, fill, i } = this.props;\n    switch (mapType) {\n      case 'choropleth':\n        return (\n          <path\n            className={`states state-transition-${i}`}\n            d={path}\n            fill={fill}\n            stroke=\"#FFFFFF\"\n            strokeWidth={0.25}\n            onMouseEnter={this.onInteractionHandler}\n            onClick={this.onInteractionHandler}\n            onTouchStart={this.onInteractionHandler}\n          />\n        );\n      case 'proportional':\n        // get the centroid of the state and translate the labels to be centered\n        const centroid = geoPath().centroid(feature);\n        const translate =\n          'translate(' + (centroid[0] - 8) + ', ' + (centroid[1] + 2) + ')';\n\n        return (\n          <g className=\"state-container\">\n            <path\n              className={`states states-bg state-transition-${i}`}\n              d={path}\n              fill=\"transparent\"\n            />\n            <circle\n              className={`states raw state-transition-${i}`}\n              r={radius}\n              fill={fill}\n              stroke=\"#FFFFFF\"\n              strokeWidth={0.5}\n              transform={'translate(' + centroid + ')'}\n              opacity={0.75}\n              onMouseEnter={this.onInteractionHandler}\n              onClick={this.onInteractionHandler}\n              onTouchStart={this.onInteractionHandler}\n            />\n            <text\n              transform={translate}\n              className=\"state-label\"\n              onMouseEnter={this.onInteractionHandler}\n              onClick={this.onInteractionHandler}\n              onTouchStart={this.onInteractionHandler}\n            >\n              {feature.properties.stateAbbreviation}\n            </text>\n          </g>\n        );\n      default:\n        return null;\n    }\n  }\n}\n\nexport default connect()(State);\n\nState.propTypes = {\n  mapType: PropTypes.string.isRequired,\n  stateName: PropTypes.string.isRequired,\n  numShootings: PropTypes.number.isRequired,\n  population: PropTypes.number.isRequired,\n  path: PropTypes.string.isRequired,\n  feature: PropTypes.object.isRequired,\n  radius: PropTypes.number,\n};\n","import * as actionTypes from '../constants/action-types';\n\nexport const callAPI = () => {\n  return {\n    type: actionTypes.CALL_API,\n  };\n};\n\nexport const sendAPIDataToReducer = data => {\n  return {\n    type: actionTypes.SEND_API_DATA_TO_REDUCER,\n    data,\n  };\n};\n\nexport const sendShootingsDataToReducer = data => {\n  return {\n    type: actionTypes.SEND_SHOOTINGS_DATA_TO_REDUCER,\n    data,\n  };\n};\n\nexport const getHoveredStateData = state => {\n  return {\n    type: actionTypes.GET_HOVERED_STATE_DATA,\n    state,\n  };\n};\n\nexport const sendCensusDataToReducer = censusData => {\n  return {\n    type: actionTypes.SEND_CENSUS_DATA_TO_REDUCER,\n    censusData,\n  };\n};\n\nexport const sendShootingsByDateToReducer = shootingsByDate => {\n  return {\n    type: actionTypes.SEND_SHOOTINGS_BY_DATE_TO_REDUCER,\n    shootingsByDate,\n  };\n};\n","// Action types for our reducer\nexport const CALL_API = 'CALL_API';\nexport const SEND_API_DATA_TO_REDUCER = 'SEND_API_DATA_TO_REDUCER';\nexport const SEND_SHOOTINGS_DATA_TO_REDUCER = 'SEND_SHOOTINGS_DATA_TO_REDUCER';\nexport const SEND_CENSUS_DATA_TO_REDUCER = 'SEND_CENSUS_DATA_TO_REDUCER';\nexport const GET_HOVERED_STATE_DATA = 'GET_HOVERED_STATE_DATA';\nexport const SEND_SHOOTINGS_BY_DATE_TO_REDUCER =\n  'SEND_SHOOTINGS_BY_DATE_TO_REDUCER';\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { sortedIndex, sortBy, uniq, round, concat, orderBy } from 'lodash';\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nimport { colors } from '../../../constants/colors';\nimport '../../../stylesheets/Map.scss';\nimport State from '../State/State';\n\nexport class Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.generatePath = this.generatePath.bind(this);\n    this.generateCircle = this.generateCircle.bind(this);\n    this.generateChoroplethLegend = this.generateChoroplethLegend.bind(this);\n    this.generateProportionalSymbolLegend = this.generateProportionalSymbolLegend.bind(\n      this\n    );\n  }\n\n  generatePath(geoPath, data) {\n    const { mapType } = this.props;\n    return (\n      <TransitionGroup component={null}>\n        {data.map((feature, i) => {\n          // render an svg path using the geographic path generator\n          const path = geoPath(feature);\n          const shootingsPerCapita =\n            (feature.properties.numShootings / feature.properties.population) *\n            1000000;\n          const breaks = this.getChoroplethBreaks();\n          // find the color that corresponds to the break\n          const fill = !shootingsPerCapita\n            ? '#F3F7F6'\n            : colors[sortedIndex(breaks, shootingsPerCapita) - 1];\n\n          // return a state component\n          return (\n            <CSSTransition\n              key={i}\n              classNames={`state-transition-${i}`}\n              appear\n              timeout={5000}\n            >\n              <State\n                mapType={mapType}\n                stateName={feature.properties.stateName}\n                numShootings={feature.properties.numShootings}\n                population={feature.properties.population}\n                path={path}\n                feature={feature}\n                i={i}\n                fill={fill}\n              />\n            </CSSTransition>\n          );\n        })}\n      </TransitionGroup>\n    );\n  }\n\n  getChoroplethBreaks() {\n    const { maps } = this.props;\n\n    // for choropleth, generate a set of rects to map over our\n    // data and obtain the shootings per million of each\n    const shootingsArray = sortBy(\n      maps.geoData.objects.states.geometries.map((feature) => {\n        return (\n          (feature.properties.numShootings / feature.properties.population) *\n          1000000\n        );\n      })\n    );\n\n    // use quantiles to generate our choropleth breaks\n    const quantiles = [0, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95];\n    let legendValues = uniq(\n      quantiles.map((tick) => round(d3.quantile(shootingsArray, tick)))\n    );\n\n    // if breaks don't include 0 as a value, prepend it\n    if (legendValues[0] !== 0) {\n      legendValues = concat([0], legendValues);\n    }\n    return legendValues;\n  }\n\n  generateCircle(geoPath, data) {\n    const { maps, mapType } = this.props;\n\n    // for circles, sort the data in descending order\n    // this ensures that smaller circles will render last - on top of larger circles\n    const statesByShootings = orderBy(\n      maps.geoData.objects.states.geometries,\n      ['properties.numShootings'],\n      ['desc']\n    );\n\n    const maxState = d3.max(\n      statesByShootings,\n      (feature) => feature.properties.numShootings\n    );\n\n    // set up a scale for the radius, the max will be the max in the dataset\n    const radius = d3.scaleSqrt().domain([0, maxState]).range([0, 80]);\n\n    // return svg paths\n    return (\n      <g>\n        <TransitionGroup component={null}>\n          {data.map((feature, i) => {\n            const path = geoPath(feature);\n            return (\n              <CSSTransition\n                key={i}\n                classNames={`state-transition-${i}`}\n                appear\n                timeout={5000}\n              >\n                <State\n                  mapType={mapType}\n                  stateName={feature.properties.stateName}\n                  numShootings={feature.properties.numShootings}\n                  population={feature.properties.population}\n                  path={path}\n                  radius={radius(feature.properties.numShootings)}\n                  feature={feature}\n                  i={i}\n                  fill={'#B24739'}\n                />\n              </CSSTransition>\n            );\n          })}\n        </TransitionGroup>\n      </g>\n    );\n  }\n\n  generateChoroplethLegend() {\n    const legendValues = this.getChoroplethBreaks();\n    const legendRects = [];\n    const legendTexts = [];\n    legendValues.forEach((value, i) => {\n      const rect = (\n        <rect\n          fill={colors[i]}\n          x={i * 30}\n          y={30}\n          width={30}\n          height={20}\n          key={`rect-${i}`}\n        />\n      );\n\n      const text = (\n        <text\n          fontSize=\"10px\"\n          fontFamily=\"HelveticaNeue-Light, Helvetica, sans-serif\"\n          x={i * 30}\n          y={60}\n          key={`text-${i}`}\n        >\n          {value}\n        </text>\n      );\n\n      legendRects.push(rect);\n      legendTexts.push(text);\n    });\n\n    return (\n      <g transform=\"translate(500, 525)\">\n        <text\n          fontSize=\"10px\"\n          fontFamily=\"HelveticaNeue-Bold, Helvetica, sans-serif\"\n          y={20}\n        >\n          Shootings Per Million\n        </text>\n        {legendRects}\n        {legendTexts}\n      </g>\n    );\n  }\n\n  generateProportionalSymbolLegend() {\n    const { maps } = this.props;\n    const shootingsArray = orderBy(\n      maps.geoData.objects.states.geometries,\n      ['properties.numShootings'],\n      ['desc']\n    ).map((feature) => feature.properties.numShootings);\n\n    // also get the max number of shootings in the dataset\n    // this will set up a d3 scale appropriate for the data\n    const maxState = d3.max(shootingsArray);\n\n    // we'll use d3 to generate quantiles for the legend\n    const quantiles = [0.75, 0.5, 0.1];\n    let legendValues = quantiles.map((tick) =>\n      round(d3.quantile(shootingsArray, tick), -1)\n    );\n\n    // check to see if all values are under 10\n    // if so, just render a single circle\n    const allUnder10 = legendValues.every((value) => value < 10);\n    if (allUnder10) {\n      legendValues = [5];\n    }\n\n    // set up a scale for the radii of the circles, using square roots\n    // to ensure circles are compared propotionally (by area)\n    const radius = d3.scaleSqrt().domain([0, maxState]).range([0, 80]);\n\n    const legendComponents = legendValues.map((value, i) => (\n      <g key={i}>\n        <circle\n          cy={-radius(value)}\n          r={radius(value)}\n          stroke=\"#B24739\"\n          strokeWidth=\"0.5\"\n          fill=\"none\"\n        />\n        <text\n          y={-2 * radius(value)}\n          dy=\"1.3em\"\n          textAnchor=\"middle\"\n          fill=\"#666\"\n          className=\"legend-label\"\n        >\n          {value}\n        </text>\n      </g>\n    ));\n\n    return (\n      <g height=\"300\" width=\"100\" transform=\"translate(875, 475)\">\n        <text transform=\"translate(-55, 5)\" className=\"legend-title\" y=\"20\">\n          Number Shootings\n        </text>\n        {legendComponents}\n      </g>\n    );\n  }\n\n  render() {\n    const { maps, mapType } = this.props;\n\n    // create a geographic path renderer for our topojson\n    const geoPath = d3.geoPath();\n    const data = topojson.feature(maps.geoData, maps.geoData.objects.states)\n      .features;\n    const map =\n      mapType === 'choropleth'\n        ? this.generatePath(geoPath, data)\n        : this.generateCircle(geoPath, data);\n    const legend =\n      mapType === 'choropleth'\n        ? this.generateChoroplethLegend()\n        : this.generateProportionalSymbolLegend();\n\n    return (\n      <div className=\"map-container\">\n        <svg\n          className={`map ${mapType}`}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 960 600\"\n        >\n          {map}\n          {legend}\n        </svg>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  maps: state.mapReducer,\n  mapType: ownProps.mapType,\n});\n\nexport default connect(mapStateToProps)(Map);\n\nMap.propTypes = {\n  maps: PropTypes.object.isRequired,\n  mapType: PropTypes.string.isRequired,\n};\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { round, orderBy } from 'lodash';\n\nimport '../../../stylesheets/DataTable.scss';\n\nexport class DataTable extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      activeTab: 'highest',\n      isHoverOnHighest: false,\n      isHoverOnLowest: false,\n    };\n    this.onMouseEnterHandler = this.onMouseEnterHandler.bind(this);\n    this.onMouseLeaveHandler = this.onMouseLeaveHandler.bind(this);\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.getTableNodes = this.getTableNodes.bind(this);\n\n    // a lookup to store names for column headers\n    this.styles = {\n      choropleth: {\n        columnHeader: 'Shootings Per Million',\n        active: {\n          background: '#4292C6',\n          color: '#FFFFFF',\n          border: '1px solid #6BAED6',\n        },\n        inactive: {\n          background: '#FFFFFF',\n          color: '#4292C6',\n          border: '1px solid #4292C6',\n        },\n      },\n      proportional: {\n        columnHeader: 'Total Shootings',\n        active: {\n          background: '#B24739',\n          color: '#FFFFFF',\n          border: '1px solid 7F3329',\n        },\n        inactive: {\n          background: '#FFFFFF',\n          color: '#B24739',\n          border: '1px solid #B24739',\n        },\n      },\n    };\n  }\n\n  onMouseEnterHandler(event) {\n    if (event.target.id === 'highest') {\n      this.setState({\n        isHoverOnHighest: true,\n        isHoverOnLowest: false,\n      });\n    } else if (event.target.id === 'lowest') {\n      this.setState({\n        isHoverOnHighest: false,\n        isHoverOnLowest: true,\n      });\n    }\n  }\n\n  onMouseLeaveHandler(event) {\n    this.setState({\n      isHoverOnHighest: false,\n      isHoverOnLowest: false,\n    });\n  }\n\n  onClickHandler(event) {\n    this.setState({\n      activeTab: event.target.id,\n    });\n  }\n\n  getTableNodes() {\n    const { mapType, maps } = this.props;\n    const { activeTab } = this.state;\n\n    // determine whether we should render the table\n    // in ascending or descending order\n    // hand this off to lodash\n    const ascDesc = activeTab === 'highest' ? ['desc'] : ['asc'];\n\n    if (mapType === 'choropleth') {\n      // order states by per million count\n      const states = orderBy(\n        maps.geoData.objects.states.geometries,\n        (state) =>\n          (state.properties.numShootings / state.properties.population) *\n          1000000,\n        ascDesc\n      ).slice(0, 5);\n\n      // render divs for both the state name and\n      // shootings per capita\n      const stateNames = states.map((state, i) => (\n        <div className=\"row\" key={i}>\n          {state.properties.stateName}\n        </div>\n      ));\n\n      const stateStats = states.map((state, i) => (\n        <div className=\"row\" key={i}>\n          {round(\n            (state.properties.numShootings / state.properties.population) *\n              1000000,\n            2\n          )}\n        </div>\n      ));\n\n      // return these in an object to be rendered\n      return {\n        stateNames,\n        stateStats,\n      };\n    } else if (mapType === 'proportional') {\n      // see our table data by looking at our reducer\n      const states = orderBy(\n        maps.geoData.objects.states.geometries,\n        ['properties.numShootings'],\n        ascDesc\n      ).slice(0, 5);\n\n      // next render divs for both the state name and\n      // total number of shootings\n      const stateNames = states.map((state, i) => (\n        <div className=\"row\" key={i}>\n          {state.properties.stateName}\n        </div>\n      ));\n\n      const stateStats = states.map((state, i) => (\n        <div className=\"row\" key={i}>\n          {state.properties.numShootings}\n        </div>\n      ));\n\n      // return these in an object to be rendered\n      return {\n        stateNames,\n        stateStats,\n      };\n    }\n  }\n\n  render() {\n    const { stateNames, stateStats } = this.getTableNodes();\n    const highest =\n      this.state.isHoverOnHighest || this.state.activeTab === 'highest'\n        ? this.styles[this.props.mapType].active\n        : this.styles[this.props.mapType].inactive;\n\n    const lowest =\n      this.state.isHoverOnLowest || this.state.activeTab === 'lowest'\n        ? this.styles[this.props.mapType].active\n        : this.styles[this.props.mapType].inactive;\n\n    return (\n      <div className=\"data-table\">\n        <div className=\"table-button-container\">\n          <button\n            className=\"button\"\n            id=\"highest\"\n            style={highest}\n            onMouseEnter={this.onMouseEnterHandler}\n            onMouseLeave={this.onMouseLeaveHandler}\n            onClick={this.onClickHandler}\n          >\n            Highest\n          </button>\n          <button\n            className=\"button\"\n            id=\"lowest\"\n            style={lowest}\n            onMouseEnter={this.onMouseEnterHandler}\n            onMouseLeave={this.onMouseLeaveHandler}\n            onClick={this.onClickHandler}\n          >\n            Lowest\n          </button>\n        </div>\n        <div className=\"table\">\n          <div>\n            <div className=\"table-header\">State</div>\n            {stateNames}\n          </div>\n          <div>\n            <div className=\"table-header\">\n              {this.styles[this.props.mapType].columnHeader}\n            </div>\n            {stateStats}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  maps: state.mapReducer,\n});\n\nexport default connect(mapStateToProps)(DataTable);\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nimport '../../../stylesheets/MapDescription.scss';\nimport DataTable from '../DataTable/DataTable';\n\nclass MapDescription extends React.Component {\n  render() {\n    const { mapType, router, maps } = this.props;\n    const stat =\n      mapType === 'choropleth'\n        ? `${maps.activeState.shootingsPerMillion.toFixed(\n            2\n          )} shootings per million`\n        : `${maps.activeState.shootings} shootings`;\n\n    return (\n      <TransitionGroup component={null}>\n        <CSSTransition\n          appear\n          classNames=\"description-transition\"\n          timeout={5000}\n        >\n          <div className=\"map-description-container\">\n            <div className=\"inset-header\">{router.result.descTitle}</div>\n            <div className=\"inset-subheader\">{router.result.descSubtitle}</div>\n            {router.result.jsx}\n            <div className=\"state-name\">{maps.activeState.stateName}</div>\n            <div className=\"inset-subheader\">{stat}</div>\n            <DataTable mapType={mapType} />\n          </div>\n        </CSSTransition>\n      </TransitionGroup>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  maps: state.mapReducer,\n  mapType: ownProps.mapType,\n  router: state.router,\n});\n\nexport default connect(mapStateToProps)(MapDescription);\n\nMapDescription.propTypes = {\n  mapType: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../../../stylesheets/Chevron.scss';\n\nconst Chevron = ({ onClick, path, visible, direction }) => {\n  return (\n    <button\n      className=\"chevron\"\n      onClick={onClick}\n      data-direction={direction}\n      style={{ visibility: visible ? 'visible' : 'hidden' }}\n      aria-hidden={!visible}\n    >\n      {visible && (\n        <svg viewBox=\"0 0 1792 1792\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path fill=\"#6C7680\" d={path} />\n        </svg>\n      )}\n    </button>\n  );\n};\n\nChevron.propTypes = {\n  path: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  visible: PropTypes.bool.isRequired,\n  direction: PropTypes.string.isRequired,\n};\n\nexport default Chevron;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  VictoryChart,\n  VictoryLine,\n  VictoryAxis,\n  VictoryLabel,\n  VictoryAnimation,\n} from 'victory';\nimport format from 'date-fns/format';\n\nexport class Line extends React.Component {\n  constructor(props) {\n    super(props);\n    this.LabelPositionMap = {\n      '/shootings-by-date': {\n        2015: 230,\n        2016: 295,\n      },\n      '/shootings-by-date/black': {\n        2015: 200,\n        2016: 325,\n      },\n      '/shootings-by-date/latino': {\n        2015: 100,\n        2016: 250,\n      },\n      '/shootings-by-date/asian': {\n        2015: 15,\n        2016: 205,\n      },\n      '/shootings-by-date/nativeamerican': {\n        2015: 340,\n        2016: 205,\n      },\n      '/shootings-by-date/white': {\n        2015: 280,\n        2016: 210,\n      },\n    };\n    this.DelayMap = {\n      '/shootings-by-date': 2000,\n      '/shootings-by-date/black': 0,\n      '/shootings-by-date/latino': 0,\n      '/shootings-by-date/asian': 0,\n      '/shootings-by-date/nativeamerican': 0,\n      '/shootings-by-date/white': 0,\n    };\n  }\n  render() {\n    const {\n      maps: { shootingsByDate },\n      router,\n    } = this.props;\n    const [stats2015, stats2016] = shootingsByDate;\n    const labelPosition = this.LabelPositionMap[router.route];\n    const delay = this.DelayMap[router.route];\n    return (\n      <VictoryChart\n        width={1000}\n        height={400}\n        padding={{ top: 0, bottom: 60, left: 80, right: 60 }}\n        domainPadding={{ y: 20 }}\n      >\n        <VictoryAxis\n          scale=\"time\"\n          tickValues={[\n            new Date(2014, 12, 1),\n            new Date(2015, 2, 1),\n            new Date(2015, 5, 1),\n            new Date(2015, 8, 1),\n            new Date(2015, 11, 1),\n          ]}\n          tickFormat={(t) => format(t, 'MMMM')}\n          label=\"Month\"\n          style={{\n            axisLabel: {\n              fontFamily: \"'HelveticaNeue', 'Helvetica', sans-serif\",\n              fontWeight: 'bold',\n              fontSize: '16px',\n              padding: 40,\n            },\n            tickLabels: {\n              fontFamily: \"'HelveticaNeue', 'Helvetica', sans-serif\",\n            },\n          }}\n        />\n        <VictoryAxis\n          dependentAxis\n          tickFormat={(t) => parseInt(t, 10)}\n          label=\"Number of Shootings\"\n          axisLabel\n          style={{\n            axisLabel: {\n              fontFamily: \"'HelveticaNeue', 'Helvetica', sans-serif\",\n              fontWeight: 'bold',\n              fontSize: '16px',\n              padding: 50,\n            },\n            tickLabels: {\n              fontFamily: \"'HelveticaNeue', 'Helvetica', sans-serif\",\n            },\n          }}\n        />\n        <VictoryLine\n          data={stats2015}\n          scale=\"time\"\n          style={{\n            data: {\n              stroke: '#7B52A1',\n            },\n          }}\n          animate={{\n            onEnter: {\n              duration: 2000,\n            },\n          }}\n        />\n        <VictoryAnimation\n          data={[{ fill: 'transparent' }, { fill: '#7B52A1' }]}\n          delay={delay}\n        >\n          {(style) => (\n            <VictoryLabel\n              x={950}\n              y={labelPosition ? labelPosition['2015'] : 240}\n              text=\"2015\"\n              style={style}\n            />\n          )}\n        </VictoryAnimation>\n        <VictoryLine\n          data={stats2016}\n          scale=\"time\"\n          style={{\n            data: {\n              stroke: '#9FA152',\n            },\n          }}\n          animate={{\n            onEnter: {\n              duration: 2000,\n            },\n          }}\n        />\n        <VictoryAnimation\n          data={[{ fill: 'transparent' }, { fill: '#9FA152' }]}\n          delay={delay}\n        >\n          {(style) => (\n            <VictoryLabel\n              x={950}\n              y={labelPosition ? labelPosition['2016'] : 325}\n              text=\"2016\"\n              style={style}\n            />\n          )}\n        </VictoryAnimation>\n      </VictoryChart>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    maps: state.mapReducer,\n    router: state.router,\n  };\n};\n\nexport default connect(mapStateToProps)(Line);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\nimport '../../../stylesheets/LineDescription.scss';\n\nexport const LineDescription = ({ title, subtitle, description }) => (\n  <TransitionGroup component={null}>\n    <CSSTransition\n      appear\n      classNames=\"line-description-transition\"\n      timeout={3000}\n    >\n      <div className=\"line-description-container\">\n        <div className=\"line-description-title\">\n          <h1 className=\"title\">{title}</h1>\n          {subtitle ? <p className=\"subtitle\">{subtitle}</p> : null}\n        </div>\n        {description}\n      </div>\n    </CSSTransition>\n  </TransitionGroup>\n);\n\nLineDescription.propTypes = {\n  title: PropTypes.string.isRequired,\n  subtitle: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  title: state.router.result.descTitle,\n  subtitle: state.router.result.descSubtitle,\n  description: state.router.result.jsx,\n});\n\nexport default connect(mapStateToProps)(LineDescription);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Fragment, push } from 'redux-little-router';\nimport { findKey } from 'lodash';\n\nimport Home from './components/home/Home';\nimport Map from './components/maps/Map/Map';\nimport MapDescription from './components/maps/MapDescription/MapDescription';\nimport Chevron from './components/navigation/Chevron/Chevron';\nimport * as ChevronPaths from './constants/chevron-paths';\nimport Line from './components/graphs/Line/Line';\nimport LineDescription from './components/graphs/LineDescription/LineDescription';\n\nimport './App.scss';\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.goToNext = this.goToNext.bind(this);\n    this.goToPrevious = this.goToPrevious.bind(this);\n    this.getChevronVisibility = this.getChevronVisibility.bind(this);\n    this.goToNextChild = this.goToNextChild.bind(this);\n    this.goToPreviousChild = this.goToPreviousChild.bind(this);\n  }\n\n  goToNext() {\n    const { router, dispatch } = this.props;\n    const nextRoute = findKey(\n      router.routes,\n      (route) => route.index === router.result.index + 1\n    );\n    dispatch(push(nextRoute));\n  }\n\n  goToPrevious() {\n    const { router, dispatch } = this.props;\n    const prevRoute = findKey(\n      router.routes,\n      (route) => route.index === router.result.index - 1\n    );\n    dispatch(push(prevRoute));\n  }\n\n  goToNextChild() {\n    const { router, dispatch } = this.props;\n    const currentRoute = router.result;\n    const nextRoute = findKey(router.routes, (route) => {\n      if (currentRoute.hasChildren) {\n        return (\n          route.childIndex === 0 && route.parent.index === currentRoute.index\n        );\n      }\n      return (\n        route.childIndex === router.result.childIndex + 1 &&\n        route.parent.index === currentRoute.parent.index\n      );\n    });\n    dispatch(push(nextRoute));\n  }\n\n  goToPreviousChild() {\n    const { router, dispatch } = this.props;\n    const currentRoute = router.result;\n    const prevRoute = findKey(router.routes, (route) => {\n      if (!currentRoute.childIndex) {\n        return route.index === currentRoute.parent.index;\n      }\n      return (\n        route.childIndex === currentRoute.childIndex - 1 &&\n        route.parent.index === currentRoute.parent.index\n      );\n    });\n    dispatch(push(prevRoute));\n  }\n\n  getChevronVisibility(position) {\n    const { router } = this.props;\n    const currentRoute = router.result;\n    switch (position) {\n      case 'right':\n        if (!currentRoute.isLastRoute && !currentRoute.parent) {\n          return true;\n        }\n        return false;\n      case 'left':\n        if (currentRoute.index) {\n          return true;\n        }\n        return false;\n      case 'down':\n        if (currentRoute.hasChildren || currentRoute.hasNextSibling) {\n          return true;\n        }\n        return false;\n      case 'up':\n        if (currentRoute.parent) {\n          return true;\n        }\n        return false;\n      default:\n        return false;\n    }\n  }\n\n  render() {\n    const { maps } = this.props;\n\n    if (maps.fetchingData) {\n      return null;\n    }\n\n    return (\n      <Fragment forRoute={'/'}>\n        <>\n          <Chevron\n            direction=\"up\"\n            path={ChevronPaths.ChevronUp}\n            visible={this.getChevronVisibility('up')}\n            onClick={this.goToPreviousChild}\n          />\n          <div className=\"page-container\">\n            <Chevron\n              direction=\"left\"\n              path={ChevronPaths.ChevronLeft}\n              onClick={this.goToPrevious}\n              visible={this.getChevronVisibility('left')}\n            />\n            <div className=\"page-content\">\n              <Fragment forRoute={'/'}>\n                <Home />\n              </Fragment>\n              <Fragment forRoute={'/total-shootings'}>\n                <div className=\"map-layout\">\n                  <Map mapType=\"proportional\" />\n                  <MapDescription mapType=\"proportional\" />\n                </div>\n              </Fragment>\n              <Fragment forRoute={'/per-capita'}>\n                <div className=\"map-layout\">\n                  <Map mapType=\"choropleth\" />\n                  <MapDescription mapType=\"choropleth\" />\n                </div>\n              </Fragment>\n              <Fragment forRoute={'/shootings-by-date'}>\n                <div className=\"chart-layout\">\n                  <LineDescription />\n                  <Line />\n                </div>\n              </Fragment>\n            </div>\n            <Chevron\n              direction=\"right\"\n              path={ChevronPaths.ChevronRight}\n              onClick={this.goToNext}\n              visible={this.getChevronVisibility('right')}\n            />\n          </div>\n          <Chevron\n            direction=\"down\"\n            path={ChevronPaths.ChevronDown}\n            visible={this.getChevronVisibility('down')}\n            onClick={this.goToNextChild}\n          />\n        </>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  maps: state.mapReducer,\n  router: state.router,\n});\n\nexport default connect(mapStateToProps)(App);\n\nApp.propTypes = {\n  maps: PropTypes.object.isRequired,\n  router: PropTypes.object.isRequired,\n};\n","const ChevronUp =\n  \"M1683 1331l-166 165q-19 19-45 19t-45-19l-531-531-531 531q-19 19-45 19t-45-19l-166-165q-19-19-19-45.5t19-45.5l742-741q19-19 45-19t45 19l742 741q19 19 19 45.5t-19 45.5z\";\nconst ChevronDown =\n  \"M1683 808l-742 741q-19 19-45 19t-45-19l-742-741q-19-19-19-45.5t19-45.5l166-165q19-19 45-19t45 19l531 531 531-531q19-19 45-19t45 19l166 165q19 19 19 45.5t-19 45.5z\";\nconst ChevronRight =\n  \"M1363 877l-742 742q-19 19-45 19t-45-19l-166-166q-19-19-19-45t19-45l531-531-531-531q-19-19-19-45t19-45l166-166q19-19 45-19t45 19l742 742q19 19 19 45t-19 45z\";\nconst ChevronLeft =\n  \"M1427 301l-531 531 531 531q19 19 19 45t-19 45l-166 166q-19 19-45 19t-45-19l-742-742q-19-19-19-45t19-45l742-742q19-19 45-19t45 19l166 166q19 19 19 45t-19 45z\";\n\nexport { ChevronUp, ChevronDown, ChevronRight, ChevronLeft };\n","import { call, put, takeLatest, select } from 'redux-saga/effects';\nimport { groupBy, drop, findKey } from 'lodash';\nimport axios from 'axios';\nimport { initializeCurrentLocation } from 'redux-little-router';\n\nimport * as actionTypes from '../constants/action-types';\nimport * as stateNames from '../assets/state-names.json';\nimport { CENSUS_API_KEY } from '../config';\n\n// define a watcher generator to listen for when CALL_API is dispatched\nexport function* watchAPICall() {\n  yield takeLatest('CALL_API', callAPI);\n}\n\nconst CENSUS_CATEGORY_BY_RACE = {\n  black: 'B02001_003E',\n  hispanic: 'B03002_012E',\n  asian: 'B02001_005E',\n  nativeAmerican: 'B02001_004E',\n  white: 'B02001_002E',\n  total: 'B01003_001E',\n};\n\n// define a function that will return our axios promise\nexport const axiosCallAPI = () => {\n  return axios.all([\n    axios.get('https://d3js.org/us-10m.v1.json'),\n    axios.get(`${process.env.PUBLIC_URL}/shootings-data.json`),\n    axios.get(\n      `https://api.census.gov/data/2015/acs/acs5?get=${Object.values(\n        CENSUS_CATEGORY_BY_RACE\n      ).join(',')}&for=state:*&key=` + CENSUS_API_KEY\n    ),\n  ]);\n};\n\n// define a sagahandle fetching our API data\nexport function* callAPI() {\n  try {\n    // call the API, using yield to wait for its response\n    const [topojson, shootingsData, censusData] = yield call(axiosCallAPI);\n    // send the raw shootings data off to redux for storage\n    yield put({\n      type: actionTypes.SEND_SHOOTINGS_DATA_TO_REDUCER,\n      data: shootingsData.data,\n    });\n\n    // group the shootings data by state\n    const dataByState = groupBy(shootingsData.data, 'state');\n\n    // reformat the census data\n    const populationStats = drop(censusData.data).map((state) => {\n      return {\n        id: parseInt(state[state.length - 1], 10),\n        populationBlack: parseInt(state[0], 10),\n        populationHispanic: parseInt(state[1], 10),\n        populationAsian: parseInt(state[2], 10),\n        populationAIAN: parseInt(state[3], 10),\n        populationWhite: parseInt(state[4], 10),\n        populationTotal: parseInt(state[5], 10),\n      };\n    });\n\n    // next, modify the topojson data and join the attributes from the shootings data\n    // we can just modify the existing object in place\n    topojson.data.objects.states.geometries.forEach((state) => {\n      // parse the id as an int to join it to state data\n      state.id = parseInt(state.id, 10);\n      const key = findKey(stateNames.default, ({ id }) => id === state.id);\n      const matchState = stateNames.default[key];\n\n      // once we have a match state, use it to obtain shooting and population data\n      const matchShootings = dataByState[matchState.code];\n      const matchPopulation = populationStats.find(\n        ({ id }) => id === matchState.id\n      );\n\n      // finally, recompose the state object\n      state.properties = {\n        stateAbbreviation: matchState.code,\n        stateName: matchState.name,\n        numShootings: matchShootings ? matchShootings.length : 0,\n        population: matchPopulation.populationTotal,\n        populationTotal: matchPopulation.populationTotal,\n        shootingsPerCapita: matchShootings\n          ? matchShootings.length / matchPopulation.populationTotal\n          : 0,\n        populationBlack: matchPopulation.populationBlack,\n        populationHispanic: matchPopulation.populationHispanic,\n        populationAsian: matchPopulation.populationAsian,\n        populationAIAN: matchPopulation.populationAIAN,\n        populationWhite: matchPopulation.populationWhite,\n      };\n    });\n\n    // once processing finishes, send the newly altered topojson data from d3 off to redux\n    // also send off the Census data for easy access\n    yield put({\n      type: actionTypes.SEND_API_DATA_TO_REDUCER,\n      data: topojson.data,\n    });\n\n    yield put({\n      type: actionTypes.SEND_CENSUS_DATA_TO_REDUCER,\n      censusData: populationStats,\n    });\n\n    // initalize the location so redux-little-router works with sagas\n    const router = yield select((state) => state.router);\n    if (router) {\n      yield put(initializeCurrentLocation(router));\n    }\n  } catch (error) {\n    // log the error\n    console.log(error);\n  }\n}\n","// a config file for API keys and the like\nexport const CENSUS_API_KEY = '3cb72d0b9a80896c19992beee5e32be81aa2ca61';","import { put, takeLatest, select } from 'redux-saga/effects';\nimport { groupBy, partition, findKey, unionBy } from 'lodash';\nimport * as d3 from 'd3';\nimport parse from 'date-fns/parse';\n\nimport * as actionTypes from '../constants/action-types';\nimport * as stateNames from '../assets/state-names.json';\n\n// define a watcher saga to listen for when ROUTER_LOCATION_CHANGED is dispatched by the router\nexport function* watchLocationChanged() {\n  yield takeLatest('ROUTER_LOCATION_CHANGED', handleLocationChanged);\n}\n\n// a lookup defining which filters to apply on the data when a particular\n// route is hit\nconst shootingsFilters = {\n  '/': { filterKey: null, filterValue: null, populationValue: 'population' },\n  '/total-shootings': {\n    filterKey: null,\n    filterValue: null,\n    populationValue: 'population',\n  },\n  '/total-shootings/black': {\n    filterKey: 'raceethnicity',\n    filterValue: 'Black',\n    populationValue: 'population',\n  },\n  '/total-shootings/latino': {\n    filterKey: 'raceethnicity',\n    filterValue: 'Hispanic/Latino',\n    populationValue: 'population',\n  },\n  '/total-shootings/asian': {\n    filterKey: 'raceethnicity',\n    filterValue: 'Asian/Pacific Islander',\n    populationValue: 'population',\n  },\n  '/total-shootings/nativeamerican': {\n    filterKey: 'raceethnicity',\n    filterValue: 'Native American',\n    populationValue: 'population',\n  },\n  '/total-shootings/white': {\n    filterKey: 'raceethnicity',\n    filterValue: 'White',\n    populationValue: 'population',\n  },\n  '/per-capita': {\n    filterKey: null,\n    filterValue: null,\n    populationValue: 'populationTotal',\n  },\n  '/per-capita/black': {\n    filterKey: 'raceethnicity',\n    filterValue: 'Black',\n    populationValue: 'populationBlack',\n  },\n  '/per-capita/latino': {\n    filterKey: 'raceethnicity',\n    filterValue: 'Hispanic/Latino',\n    populationValue: 'populationHispanic',\n  },\n  '/per-capita/asian': {\n    filterKey: 'raceethnicity',\n    filterValue: 'Asian/Pacific Islander',\n    populationValue: 'populationAsian',\n  },\n  '/per-capita/nativeamerican': {\n    filterKey: 'raceethnicity',\n    filterValue: 'Native American',\n    populationValue: 'populationAIAN',\n  },\n  '/per-capita/white': {\n    filterKey: 'raceethnicity',\n    filterValue: 'White',\n    populationValue: 'populationWhite',\n  },\n  '/shootings-by-date': {\n    filterKey: null,\n    filterValue: null,\n    populationValue: 'population',\n  },\n  '/shootings-by-date/black': {\n    filterKey: 'raceethnicity',\n    filterValue: 'Black',\n    populationValue: 'populationBlack',\n  },\n  '/shootings-by-date/latino': {\n    filterKey: 'raceethnicity',\n    filterValue: 'Hispanic/Latino',\n    populationValue: 'populationHispanic',\n  },\n  '/shootings-by-date/asian': {\n    filterKey: 'raceethnicity',\n    filterValue: 'Asian/Pacific Islander',\n    populationValue: 'populationAsian',\n  },\n  '/shootings-by-date/nativeamerican': {\n    filterKey: 'raceethnicity',\n    filterValue: 'Native American',\n    populationValue: 'populationAIAN',\n  },\n  '/shootings-by-date/white': {\n    filterKey: 'raceethnicity',\n    filterValue: 'White',\n    populationValue: 'populationWhite',\n  },\n};\n\n// a function for filtering the shootings data\n// filters the data given a key and a value for that key\nconst filterShootingsData = (data, filterKey = null, filterValue = null) => {\n  const clone = [...data];\n  if (filterKey && filterValue) {\n    return clone.filter((entry) => entry[filterKey] === filterValue);\n  }\n  return clone;\n};\n\n// a function for joining the shootingsData and geoData together\n// this function gets run on route change, recomposing\n// our topojson object in place\nconst joinShootingsDataToGeoData = (\n  shootingsData,\n  geoData,\n  populationFilter\n) => {\n  if (!geoData) {\n    return [];\n  }\n\n  const dataByState = groupBy(shootingsData, 'state');\n  geoData.objects.states.geometries.forEach((state) => {\n    // parse the id as an int so it can join to the state data\n    // stored in constants\n    state.id = parseInt(state.id, 10);\n    const matchId = findKey(stateNames.default, ({ id }) => id === state.id);\n    const matchState = stateNames.default[matchId];\n\n    // once a match state is found, use it to obtain\n    // the number of shootings and population value for the filter\n    const matchShootings = dataByState[matchState.code];\n    const numShootings = matchShootings ? matchShootings.length : 0;\n    const population = state.properties[populationFilter];\n\n    // finally, recompose the object\n    state.properties = {\n      ...state.properties,\n      numShootings,\n      population,\n    };\n  });\n\n  return geoData;\n};\n\n// function for generating proper topojson data based on route and filters\nconst handleMapRoutes = (route, shootingsData, geoData) => {\n  // obtain the proper data filter based on the route\n  const { filterKey, filterValue, populationValue } = shootingsFilters[route];\n\n  // filter the shootings data\n  const filteredData = filterShootingsData(\n    shootingsData,\n    filterKey,\n    filterValue\n  );\n\n  // join it to the topojson data\n  return joinShootingsDataToGeoData(filteredData, geoData, populationValue);\n};\n\n// function for generating the datasets for the parallel year line graph\nconst handleDateRoutes = (route, shootingsData) => {\n  // filter the shootings data based on route\n  const { filterKey, filterValue } = shootingsFilters[route];\n  const filteredData = filterShootingsData(\n    shootingsData,\n    filterKey,\n    filterValue\n  );\n  // group shootings by month and year and return as two collections to redux\n  const shootingsByDate = filteredData.map((shooting) => {\n    return {\n      month: shooting.month,\n      year: shooting.year,\n    };\n  });\n\n  // partition the data based on year\n  const shootingsByYear = partition(\n    shootingsByDate,\n    (shooting) => shooting.year === 2015\n  );\n\n  // group by month within each year\n  const groupByMonth = shootingsByYear.map((year) => {\n    return groupBy(year, ({ month }) => {\n      // To display data on roughly the same month timescale, just use 2015\n      // as the base year\n      return parse(`${month} - 2015`, 'MMMM - yyyy', new Date()).valueOf();\n    });\n  });\n\n  const data = groupByMonth.map((year) => {\n    return Object.keys(year).map((month) => ({\n      x: parseInt(month, 10),\n      y: year[month].length || 0,\n    }));\n  });\n\n  // Handle months where no shootings occured to prevent holes\n  const emptyMonths = d3.timeMonth\n    .range(new Date(2015, 0, 1), new Date(2016, 0, 1))\n    .map((date) => ({ x: date.valueOf(), y: 0 }));\n\n  const [data2015, data2016] = data;\n\n  return [\n    unionBy(data2015, emptyMonths, 'x'),\n    unionBy(data2016, emptyMonths, 'x'),\n  ];\n};\n\n// our generator function to run our handleLocationChanged saga\nexport function* handleLocationChanged(action) {\n  try {\n    // read the shootings data from the redux store\n    const { shootingsData, geoData } = yield select(\n      (state) => state.mapReducer\n    );\n    const router = yield select((state) => state.router);\n    // check if this route is map-based\n    if (router.routes[action.payload.route].type === 'map') {\n      const data = handleMapRoutes(\n        action.payload.route,\n        shootingsData,\n        geoData\n      );\n\n      // send this data to redux so our Map component can read from it\n      yield put({ type: actionTypes.SEND_API_DATA_TO_REDUCER, data });\n    }\n    // check if this is the line graph\n    if (router.routes[action.payload.route].type === 'line') {\n      const shootingsByDate = handleDateRoutes(\n        action.payload.route,\n        shootingsData\n      );\n\n      yield put({\n        type: actionTypes.SEND_SHOOTINGS_BY_DATE_TO_REDUCER,\n        shootingsByDate,\n      });\n    }\n  } catch (error) {\n    // log any errors\n    console.log(error);\n  }\n}\n","import { all } from 'redux-saga/effects';\nimport { watchAPICall } from './mapSagas';\nimport { watchLocationChanged } from './routerSagas';\n\n// export our rootSaga\nexport default function* rootSaga() {\n    yield all([\n        watchAPICall(),\n        watchLocationChanged()\n    ])\n}\n","import React from 'react';\n\nexport const totalShootingsJSX = (\n  <div className=\"text\">\n    Of all 50 states, <b>California</b> had the greatest number of shootings in\n    this time period at <b>372</b>. <b>Texas</b> and <b>Florida</b> had the\n    second and third greatest counts at <b>205</b> and <b>144</b>, respectively.{' '}\n    <b>North Dakota</b> had the fewest shootings of all states with only{' '}\n    <b>2</b>.\n  </div>\n);\n\nexport const totalShootingsBlackJSX = (\n  <div className=\"text\">\n    Shootings of African Americans by police were heavily concentrated along the\n    Eastern seaboard and in the southern United States. However,{' '}\n    <b>California</b> had the greatest number of shootings of black Americans at{' '}\n    <b>62</b>. <b>Florida</b> and <b>Texas</b> had the second and third highest\n    totals at <b>50</b> and <b>41</b>, respectively. States with low African\n    American populations in the intermountain West and the Northeast, such as{' '}\n    <b>Montana</b>, <b>Idaho</b>, <b>Maine</b>, and <b>Vermont</b> were among\n    the few with no shootings of black Americans.\n  </div>\n);\n\nexport const totalShootingsLatinoJSX = (\n  <div className=\"text\">\n    Shootings of Latinos by police were spatially concentrated in the Southwest\n    along the U.S. - Mexico border. <b>California</b> had the greatest number of\n    shootings at <b>154</b>, more than double that of the second highest,{' '}\n    <b>Texas</b>, at <b>67</b>. <b>Arizona</b>, <b>New Mexico</b>, and{' '}\n    <b>Colorado</b> all demonstrated high counts as well.\n  </div>\n);\n\nexport const totalShootingsAsianJSX = (\n  <div className=\"text\">\n    Shootings of Asian Americans demonstrate a high level of spatial\n    variability, with many states having none at all between 2015 and 2016.{' '}\n    <b>California</b> once again had the greatest number of shootings at{' '}\n    <b>16</b>. <b>Hawaii</b> had the second largest number, <b>6</b>, likely\n    owing to a larger Asian American population than other states.\n  </div>\n);\n\nexport const totalShootingsNativeAmericanJSX = (\n  <div className=\"text\">\n    Police involved shootings of Native Americans were mainly concentrated in\n    western states with larger indigenous populations. <b>Arizona</b> had the\n    greatest number of shootings with <b>9</b>. <b>Alaksa</b> and{' '}\n    <b>Washington</b> had the second and third highest counts, at <b>7</b> and{' '}\n    <b>6</b> respectively.\n  </div>\n);\n\nexport const totalShootingsWhiteJSX = (\n  <div className=\"text\">\n    The majority of people shot by the police between 2015 and 2016 were white.{' '}\n    <b>California</b>, <b>Texas</b>, and <b>Florida</b> had the greatest number\n    of shootings at <b>125</b>, <b>92</b>, and <b>74</b>, respectively. Open\n    carry states like <b>Arizona</b> and <b>Oklahoma</b> also had high counts. A\n    high incidence of shootings is also visible in stretches of Appalachia and\n    the southern United States.\n  </div>\n);\n\nexport const shootingsPerCapitaJSX = (\n  <div className=\"text\">\n    Of all 50 states, <b>New Mexico</b> had the greatest number of police\n    shootings per million residents between 2015 and 2016. Western states in\n    general demonstrated higher rates than the eastern and northern United\n    States, with the <b>District of Columbia</b> being an exception. Four of the\n    five lowest rates were found in the northeastern United States.\n  </div>\n);\n\nexport const shootingsPerCapitaBlackJSX = (\n  <div className=\"text\">\n    Per million African American residents, <b>Oklahoma</b> had the highest rate\n    of police shootings at <b>68.21</b>. <b>West Virginia</b> and{' '}\n    <b>Nebraska</b> had the second and third highest rates at <b>48.89</b> and{' '}\n    <b>43.45</b> respectively. Only <b>10</b> states had no shootings of African\n    Americans in this time period.\n  </div>\n);\n\nexport const shootingsPerCapitaLatinoJSX = (\n  <div className=\"text\">\n    The western United States demonstrated a much higher incidence of police\n    involved shootings of Latinos than other parts of the country. Southwest\n    border states like <b>New Mexico</b> (<b>24.23</b> shootings per million\n    Latino residents) and intermountain West states like <b>Idaho</b> (\n    <b>20.91</b>) had generally higher rates than eastern states.\n  </div>\n);\n\nexport const shootingsPerCapitaAsianJSX = (\n  <div className=\"text\">\n    On a per capita basis, Asians were the least likely of all races to be\n    killed by police between 2015 and 2016. In fact,{' '}\n    <b>a majority of states (35)</b> had no shootings of Asians during this time\n    period. <b>Colorado</b>, <b>Louisiana</b>, and <b>Hawaii</b> were major\n    outliers to this trend, demonstrating the highest rates of shootings of\n    Asians.\n  </div>\n);\n\nexport const shootingsPerCapitaNativeAmericanJSX = (\n  <div className=\"text\">\n    <b>\n      Native americans are killed by police at a higher rate than any other race\n      in the country.\n    </b>{' '}\n    While Midwestern states with larger indigenous populations demonstrate\n    consistently inflated rates, northwestern states like <b>Alaska</b> and{' '}\n    <b>Washington</b> retain many of the highest rates. <b>Vermont</b> is an\n    extreme outlier in the dataset, its rate of shootings being the result of a\n    small indigenous population.\n  </div>\n);\n\nexport const shootingsPerCapitaWhiteJSX = (\n  <div className=\"text\">\n    Shootings of whites by police closely mirrored the geography of the nation\n    as a whole. Western states like <b>Oklahoma</b>, <b>Wyoming</b>, and{' '}\n    <b>New Mexico</b> demonstrated the highest rates while the northeastern\n    United States had consistently low rates. Of all races, whites were the\n    second least likely to be shot by the police. Perhaps most startingly, no\n    whites were killed in the <b>District of Columbia</b> during this time\n    period, meaning the city's high rate of police shootings were exclusively of\n    people of color.\n  </div>\n);\n\nexport const shootingsByDayJSX = (\n  <p className=\"text\">\n    Police involved shootings display a more or less stochastic distribution\n    across the time period surveyed. <b>July 2015</b> and <b>March 2015</b> had\n    the most shootings of any month at <b>124</b> and <b>113</b>, respectively.{' '}\n    <b>June 2015</b> and <b>April 2016</b> tied for the least, each with{' '}\n    <b>80</b> shootings. Median shootings per month were <b>91</b> over the two\n    year period, with a standard deviation of <b>10.2</b>.\n  </p>\n);\n\nexport const shootingsByDayBlackJSX = (\n  <p className=\"text\">\n    Shootings of African Americans spiked in <b>March of 2015</b>, when 37 were\n    killed in a single month. The fewest occurred in the{' '}\n    <b>last month of 2016</b>, when <b>14</b> people were killed. Unfortunately,\n    killings of African Americans remain fairly steady across the two years,\n    with a median of <b>23.5</b> people per month and a standard deviation of{' '}\n    <b>5.22</b>.\n  </p>\n);\n\nexport const shootingsByDayLatinoJSX = (\n  <p className=\"text\">\n    Shootings of Latinos peaked in <b>July of 2015</b> and <b>March of 2016</b>{' '}\n    at <b>21 people </b> in each of those months. Shootings fell sharply in{' '}\n    <b>May of 2015</b> to <b>6</b>. However, this is an outlier in the data.\n    Median shootings per month of Latinos was at <b>16.5</b> people per month,\n    with a standard deviation of <b>3.49</b>.\n  </p>\n);\n\nexport const shootingsByDayAsianJsx = (\n  <p className=\"text\">\n    Shootings of Asians were infrequent across the two years surveyed, reaching\n    a maximum of <b>5</b> in <b>December of 2015</b>. Every other month ranged\n    between <b>1 and 3 shootings</b>, with a median of <b>2</b> across the time\n    period and a standard deviation of <b>1.26</b>.\n  </p>\n);\n\nexport const shootingsByDayNativeAmericanJsx = (\n  <p className=\"text\">\n    Median shootings of Native Americans between 2015 and 2016 were only one\n    fewer per month than Asians, at <b>1</b>, despite the fact that their total\n    population is considerably smaller. The standard deviation was actually\n    higher at <b>1.56</b>.Shootings peaked in <b>September of 2015</b> and{' '}\n    <b>January of 2016</b> at <b>5</b>.\n  </p>\n);\n\nexport const shootingsByDayWhiteJSX = (\n  <p className=\"text\">\n    Shootings of whites reached a median of <b>46.5</b> between 2015 and 2016,\n    peaking to a high of <b>69</b> in <b>July of 2015</b> and reaching a low in{' '}\n    <b>the same month in 2016</b> at <b>38</b>. The standard deviation was the\n    highest for any racial group at <b>6.89</b>.\n  </p>\n);\n","// import necessary modules\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, compose, applyMiddleware, combineReducers } from 'redux';\nimport { routerForBrowser } from 'redux-little-router';\n\nimport { mapReducer } from './reducers/mapReducer';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './sagas/rootSaga';\nimport { callAPI } from './actions/mapActions';\nimport {\n  totalShootingsJSX,\n  totalShootingsBlackJSX,\n  totalShootingsLatinoJSX,\n  totalShootingsAsianJSX,\n  totalShootingsNativeAmericanJSX,\n  totalShootingsWhiteJSX,\n  shootingsPerCapitaJSX,\n  shootingsPerCapitaBlackJSX,\n  shootingsPerCapitaLatinoJSX,\n  shootingsPerCapitaAsianJSX,\n  shootingsPerCapitaNativeAmericanJSX,\n  shootingsPerCapitaWhiteJSX,\n  shootingsByDayJSX,\n  shootingsByDayBlackJSX,\n  shootingsByDayLatinoJSX,\n  shootingsByDayAsianJsx,\n  shootingsByDayNativeAmericanJsx,\n  shootingsByDayWhiteJSX,\n} from './constants/descriptions';\n\n// define routes for the application\nconst routes = {\n  '/': {\n    title: 'Intro',\n    index: 0,\n  },\n  '/total-shootings': {\n    type: 'map',\n    title: 'Total Shootings',\n    descTitle: 'Total Shootings',\n    descSubtitle: 'By State',\n    index: 1,\n    hasChildren: true,\n    jsx: totalShootingsJSX,\n    '/black': {\n      type: 'map',\n      title: 'Total Shootings By Race African American',\n      descTitle: 'Total Shootings',\n      descSubtitle: 'African American',\n      childIndex: 0,\n      hasNextSibling: true,\n      jsx: totalShootingsBlackJSX,\n    },\n    '/latino': {\n      type: 'map',\n      title: 'Total Shootings By Race Latino',\n      descTitle: 'Total Shootings',\n      descSubtitle: 'Latino',\n      childIndex: 1,\n      hasNextSibling: true,\n      jsx: totalShootingsLatinoJSX,\n    },\n    '/asian': {\n      type: 'map',\n      title: 'Total Shootings By Race Asian',\n      descTitle: 'Total Shootings',\n      descSubtitle: 'Asian',\n      childIndex: 2,\n      hasNextSibling: true,\n      jsx: totalShootingsAsianJSX,\n    },\n    '/nativeamerican': {\n      type: 'map',\n      title: 'Total Shootings By Race Native American',\n      descTitle: 'Total Shootings',\n      descSubtitle: 'Native American',\n      childIndex: 3,\n      hasNextSibling: true,\n      jsx: totalShootingsNativeAmericanJSX,\n    },\n    '/white': {\n      type: 'map',\n      title: 'Total Shootings By Race White',\n      descTitle: 'Total Shootings',\n      descSubtitle: 'White',\n      childIndex: 4,\n      hasNextSibling: false,\n      isLastChildRoute: true,\n      jsx: totalShootingsWhiteJSX,\n    },\n  },\n  '/per-capita': {\n    type: 'map',\n    title: 'Shootings Per Million By State',\n    descTitle: 'Shootings Per Million',\n    descSubtitle: 'By State',\n    index: 2,\n    hasChildren: true,\n    jsx: shootingsPerCapitaJSX,\n    '/black': {\n      type: 'map',\n      title: 'Shootings Per Million By Race African American',\n      descTitle: 'Shootings Per Million',\n      descSubtitle: 'African American',\n      childIndex: 0,\n      hasNextSibling: true,\n      jsx: shootingsPerCapitaBlackJSX,\n    },\n    '/latino': {\n      type: 'map',\n      title: 'Shootings Per Million By Race Latino',\n      descTitle: 'Shootings Per Million',\n      descSubtitle: 'Latino',\n      childIndex: 1,\n      hasNextSibling: true,\n      jsx: shootingsPerCapitaLatinoJSX,\n    },\n    '/asian': {\n      type: 'map',\n      title: 'Shootings Per Million By Race Asian',\n      descTitle: 'Shootings Per Million',\n      descSubtitle: 'Asian',\n      childIndex: 2,\n      hasNextSibling: true,\n      jsx: shootingsPerCapitaAsianJSX,\n    },\n    '/nativeamerican': {\n      type: 'map',\n      title: 'Shootings Per Million By Race Native American',\n      descTitle: 'Shootings Per Million',\n      descSubtitle: 'Native American',\n      childIndex: 3,\n      hasNextSibling: true,\n      jsx: shootingsPerCapitaNativeAmericanJSX,\n    },\n    '/white': {\n      type: 'map',\n      title: 'Shootings Per Million By Race White',\n      descTitle: 'Shootings Per Million',\n      descSubtitle: 'White',\n      childIndex: 4,\n      hasNextSibling: false,\n      isLastChildRoute: true,\n      jsx: shootingsPerCapitaWhiteJSX,\n    },\n  },\n  '/shootings-by-date': {\n    type: 'line',\n    title: 'Shootings By Date',\n    descTitle: 'Total Shootings By Date',\n    index: 3,\n    isLastRoute: true,\n    jsx: shootingsByDayJSX,\n    hasChildren: true,\n    '/black': {\n      type: 'line',\n      title: 'Shootings By Date By Race African American',\n      descTitle: 'Total Shootings By Date',\n      descSubtitle: 'African American',\n      childIndex: 0,\n      hasNextSibling: true,\n      jsx: shootingsByDayBlackJSX,\n    },\n    '/latino': {\n      type: 'line',\n      title: 'Shootings By Date By Race Latino',\n      descTitle: 'Total Shootings By Date',\n      descSubtitle: 'Latino',\n      childIndex: 1,\n      hasNextSibling: true,\n      jsx: shootingsByDayLatinoJSX,\n    },\n    '/asian': {\n      type: 'line',\n      title: 'Shootings By Date By Race Asian',\n      descTitle: 'Total Shootings By Date',\n      descSubtitle: 'Asian',\n      childIndex: 2,\n      hasNextSibling: true,\n      jsx: shootingsByDayAsianJsx,\n    },\n    '/nativeamerican': {\n      type: 'line',\n      title: 'Shootings By Date By Race Native American',\n      descTitle: 'Total Shootings By Date',\n      descSubtitle: 'Native American',\n      childIndex: 3,\n      hasNextSibling: true,\n      jsx: shootingsByDayNativeAmericanJsx,\n    },\n    '/white': {\n      type: 'line',\n      title: 'Shootings By Date By Race White',\n      descTitle: 'Total Shootings By Date',\n      descSubtitle: 'White',\n      childIndex: 4,\n      hasNextSibling: false,\n      isLastChildRoute: true,\n      jsx: shootingsByDayWhiteJSX,\n    },\n  },\n};\n\n// create the router\nconst { reducer, middleware, enhancer } = routerForBrowser({\n  routes,\n  basename: '/police-shootings',\n});\n\n// create our saga middleware - we'll use this handle our side effects\nconst sagaMiddleware = createSagaMiddleware();\n\n// create our redux store, applying the router and the saga middleware\nexport const store = createStore(\n  combineReducers({ router: reducer, mapReducer }),\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n  compose(enhancer, applyMiddleware(middleware, sagaMiddleware))\n);\n\n// be sure to run the saga middleware\nsagaMiddleware.run(rootSaga);\n\n// get the initial location of the router\nstore.dispatch(callAPI());\n\n// render the App\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root') || document.createElement('div')\n);\n"],"sourceRoot":""}